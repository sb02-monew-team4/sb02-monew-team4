name: CD (Deploy to EC2)

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REPOSITORY_URI: ${{ vars.ECR_REPOSITORY_URI }}
  ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}
  ECS_SERVICE: ${{ vars.ECS_SERVICE }}
  ECS_TASK_DEFINITION: ${{ vars.ECS_TASK_DEFINITION }}

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.set-image-tag.outputs.image-tag }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set image tag
        id: set-image-tag
        run: |
          IMAGE_TAG=$(date +'%Y%m%d%H%M%S')-${GITHUB_SHA::8}
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} \
          | docker login --username AWS --password-stdin ${{ env.ECR_REPOSITORY_URI }}

      - name: Build docker image
        run: |
          docker build \
            -t ${{ env.ECR_REPOSITORY_URI }}:latest \
            -t ${{ env.ECR_REPOSITORY_URI }}:${{ env.IMAGE_TAG }} .

      - name: Push Docker image
        run: |
          docker push ${{ env.ECR_REPOSITORY_URI }}:latest
          docker push ${{ env.ECR_REPOSITORY_URI }}:${{ env.IMAGE_TAG }}


  deploy-to-ecs:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: build-and-push

    env:
      IMAGE_TAG: ${{ needs.build-and-push.outputs.image-tag }}

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download current ECS task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} --query taskDefinition > task-def.json

      - name: Update task definition with new image
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-def.json
          container-name: monew-app
          image: ${{ env.ECR_REPOSITORY_URI }}:${{ env.IMAGE_TAG }}

      - name: Scale down ECS service to 0 (stop current tasks)
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --desired-count 0

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          cluster: ${{ env.ECS_CLUSTER }}
          service: ${{ env.ECS_SERVICE }}
          wait-for-service-stability: true

      - name: Scale up ECS service to 1 (start tasks)
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --desired-count 1

      - name: Verify deployment
        run: |
          echo "Verifying deployment..."
          SERVICE_STATUS=$(aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --query "services[0].status" --output text)
          if [ "$SERVICE_STATUS" = "ACTIVE" ]; then
            echo "Deployment successful! Service is running."
          else
            echo "Deployment may have issues. Running count: $SERVICE_STATUS"
            exit 1
          fi